REMISE 1

JSON à part avec :
    numéro d'équipe
    git : compte, mettre prof collaborateur
    Docker : compte, mettre prof collaborateur
    Mot de passe pour reseter BD

Route d'API pouvant recevoir et persister les transactions envoyées par une application web
@ POST/transactions/
Data:{...}
Réponse :
200: JSON bien formaté
400: JSON mal formaté

Route d'API pouvant vider les collections de la BD avec mot de passe
@DELETE/transactions/
Data: {"password":...}
Réponse:
200: Si bon mot de passe
401: si mauvais mot de passe

Pas besoin appli web pour remise 1
Juste pouvoir donner messages d'erreurs est correct

---------------------------------------------------------------

GITHUB
Sert à se partager le code, et à voir les modifs des autres
voir : https://guides.github.com/introduction/git-handbook/​

On y retrouvera donc les documents des codes pour l'appli web.

--------------------------------------------------
DOCKER HUB
Pour héberger l'appli avec tous les codes et librairies nécessaires.
C'est en fait une image de l'application montée sur nos ordinateurs dans le docker qu'on a d'installé.
Quand notre code sera satisfaisant pour la remise, on le push sur le docker pour créer une image que le prof va utiliser.
En faisant docker pull et run du docker du projet, le prof fera fonctionner l'appli, avec ses données.

Docker pour le projet : methe62/glo4035_4

----------------

DOCKER JTBAI

Pour obtenir les données du projet

"L'application docker que je vous ai fourni envoie des requêtes HTTP et
vous devez les envoyer sur le port 80 de votre application.
Il va y avoir un peu de cuisine à faire avec les docker network, etc"
    Doit donc faire parler notre docker avec celui du prof pour que notre appli puisse aller chercher les données

docker pull jtbai/glo4035-data-server

docker run --name dataserver -p 5000:5000 -d jtbai/glo4035-data-server

*Je cherche encore ce qu'il faut mettre dans la deuxième boîte pour pouvoir avoir enfin les données*



------------------------------------

DOCKER NETWORK

***Voir notes cours 1***

Encore en test, pour connecter mon container local avec celui du prof (pour avoir les données)
https://docs.docker.com/v17.09/engine/userguide/networking/configure-dns/
-----------------------------------

MLAB

Pour hoster la BD (Database-as-a-service)
Commentaire du prof :
Vous aurez à obtenir le jeu de données a quelque reprises pour arriver à une architecture qui vous convient.
Vous devrez vous assurer que les données sont persistées dans une base de données à quelque part

Nom BD : projetglo4035_4
DB username : Equipe4
DB password cestpart1

Il va falloir connecter la BD à l'appli. Pour ça, il faut prendre un Driver dans un langage.
Je crois que c'est mieux que ce soit dans le même langage que l'appli. Je ne suis pas sure. (https://docs.mlab.com/connecting/#methods)

J'ai posé des questions au prof par rapport à ça :

Il semble y avoir 2 façons de se connecter à notre BD. 
La première, dans le shell interactif. Cependant, ça dit qu'il faut utiliser le MongoDB supporté par la bd, dans notre cas 3.6.6.
Est-ce que ça causerait problème d'utiliser MongoDB 3.6.6 pour coder?
L'autre méthode implique un MongoDB driver pour pouvoir se connecter à la BD. Si je comprends bien, c'est pour mettre dans l'appli.
Mais comme tu vas utiliser tes propres données, est-ce nécessaire. Si oui, est-ce qu'on choisi le driver selon ce qu'on choisit
comme langage pour coder l'appli web ou ça ne change rien?
Et ce driver, c'est une library qu'on met avec le code de l'appli dans le docker et qu'on appelle quelque part dans le code de l'appli?

Ses réponses : 
En effet, pour te connecter à un serveur de base de données tu as 2 choix. Soit que tu utilise le client (en ligne de commande) ou un driver. 
Le driver sert à accéder par programmation au serveur de base de données.
Tu as bien vu, son implémentation est dépendante du langage de programmation utilisé. Cependant, il existe déjà BEAUCOUP
d'implémentations de ce driver, peu importe le langage
Tu as mongodb, mongoose pour javascript
Tu as mongolite pour R
Tu as pymongo pour python ....

Il faut juste lire la doc pour savoir comment utilise ce driver. 
Quand à la nécessité ou non d'utiliser une base de données et la version utilisée, je vous laisse réfléchir à l'utilité du support
de persistance non relationnel dans votre application, ce à quoi mes données ressemble et comment elle réussiront à s'intégrer dans
votre application :)

-----------------------------------------------